// Generated from YallVocab.g4 by ANTLR 4.4
package grammar;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class YallVocab extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		YALL=1, IS=2, IF=3, THEN=4, ELSE=5, WHILE=6, LOCK=7, UNLOCK=8, FORK=9, 
		JOIN=10, DO=11, FUNCTION=12, NONE=13, INTO=14, UP=15, INPUT=16, OUTPUT=17, 
		INTEGER=18, BOOLEAN=19, TRUE=20, FALSE=21, LPAR=22, RPAR=23, LBRACE=24, 
		RBRACE=25, SEMI=26, LBLOCK=27, RBLOCK=28, QUOTE=29, DQUOTE=30, COMMA=31, 
		EXCL=32, AT=33, PLUS=34, MINUS=35, TIMES=36, DIVIDE=37, AND=38, OR=39, 
		GT=40, LT=41, GE=42, LE=43, EQ=44, NE=45, ID=46, NUM=47, WS=48;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'"
	};
	public static final String[] ruleNames = {
		"YALL", "IS", "IF", "THEN", "ELSE", "WHILE", "LOCK", "UNLOCK", "FORK", 
		"JOIN", "DO", "FUNCTION", "NONE", "INTO", "UP", "INPUT", "OUTPUT", "INTEGER", 
		"BOOLEAN", "TRUE", "FALSE", "LPAR", "RPAR", "LBRACE", "RBRACE", "SEMI", 
		"LBLOCK", "RBLOCK", "QUOTE", "DQUOTE", "COMMA", "EXCL", "AT", "PLUS", 
		"MINUS", "TIMES", "DIVIDE", "AND", "OR", "GT", "LT", "GE", "LE", "EQ", 
		"NE", "ID", "NUM", "WS", "LOWERCASE", "UPPERCASE", "LETTER", "DIGIT"
	};


	public YallVocab(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "YallVocab.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62\u0141\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3"+
		"\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b"+
		"\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3"+
		"\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25"+
		"\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31"+
		"\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!"+
		"\3!\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3"+
		"&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3"+
		"-\3-\3.\3.\3.\3/\3/\3/\7/\u0127\n/\f/\16/\u012a\13/\3\60\3\60\7\60\u012e"+
		"\n\60\f\60\16\60\u0131\13\60\3\61\6\61\u0134\n\61\r\61\16\61\u0135\3\61"+
		"\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\2\2\66\3\3\5\4\7\5\t\6\13"+
		"\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'"+
		"\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'"+
		"M(O)Q*S+U,W-Y.[/]\60_\61a\62c\2e\2g\2i\2\3\2\7\5\2\13\f\17\17\"\"\3\2"+
		"c|\3\2C\\\4\2C\\c|\3\2\62;\u0140\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2"+
		"\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2"+
		"\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2"+
		"\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2"+
		"\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2"+
		"\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2"+
		"\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O"+
		"\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2"+
		"\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\3k\3\2\2\2\5p\3\2\2\2\7s\3\2\2\2"+
		"\tv\3\2\2\2\13{\3\2\2\2\r\u0080\3\2\2\2\17\u0086\3\2\2\2\21\u008b\3\2"+
		"\2\2\23\u0092\3\2\2\2\25\u0097\3\2\2\2\27\u009c\3\2\2\2\31\u009f\3\2\2"+
		"\2\33\u00a8\3\2\2\2\35\u00ad\3\2\2\2\37\u00b2\3\2\2\2!\u00b5\3\2\2\2#"+
		"\u00bb\3\2\2\2%\u00c2\3\2\2\2\'\u00ca\3\2\2\2)\u00d2\3\2\2\2+\u00d7\3"+
		"\2\2\2-\u00dd\3\2\2\2/\u00df\3\2\2\2\61\u00e1\3\2\2\2\63\u00e3\3\2\2\2"+
		"\65\u00e5\3\2\2\2\67\u00e7\3\2\2\29\u00e9\3\2\2\2;\u00eb\3\2\2\2=\u00ed"+
		"\3\2\2\2?\u00ef\3\2\2\2A\u00f1\3\2\2\2C\u00f3\3\2\2\2E\u00f5\3\2\2\2G"+
		"\u00fa\3\2\2\2I\u0100\3\2\2\2K\u0106\3\2\2\2M\u010a\3\2\2\2O\u010e\3\2"+
		"\2\2Q\u0111\3\2\2\2S\u0114\3\2\2\2U\u0117\3\2\2\2W\u011a\3\2\2\2Y\u011d"+
		"\3\2\2\2[\u0120\3\2\2\2]\u0123\3\2\2\2_\u012b\3\2\2\2a\u0133\3\2\2\2c"+
		"\u0139\3\2\2\2e\u013b\3\2\2\2g\u013d\3\2\2\2i\u013f\3\2\2\2kl\7[\2\2l"+
		"m\7C\2\2mn\7N\2\2no\7N\2\2o\4\3\2\2\2pq\7k\2\2qr\7u\2\2r\6\3\2\2\2st\7"+
		"k\2\2tu\7h\2\2u\b\3\2\2\2vw\7v\2\2wx\7j\2\2xy\7g\2\2yz\7p\2\2z\n\3\2\2"+
		"\2{|\7g\2\2|}\7n\2\2}~\7u\2\2~\177\7g\2\2\177\f\3\2\2\2\u0080\u0081\7"+
		"y\2\2\u0081\u0082\7j\2\2\u0082\u0083\7k\2\2\u0083\u0084\7n\2\2\u0084\u0085"+
		"\7g\2\2\u0085\16\3\2\2\2\u0086\u0087\7n\2\2\u0087\u0088\7q\2\2\u0088\u0089"+
		"\7e\2\2\u0089\u008a\7m\2\2\u008a\20\3\2\2\2\u008b\u008c\7w\2\2\u008c\u008d"+
		"\7p\2\2\u008d\u008e\7n\2\2\u008e\u008f\7q\2\2\u008f\u0090\7e\2\2\u0090"+
		"\u0091\7m\2\2\u0091\22\3\2\2\2\u0092\u0093\7h\2\2\u0093\u0094\7q\2\2\u0094"+
		"\u0095\7t\2\2\u0095\u0096\7m\2\2\u0096\24\3\2\2\2\u0097\u0098\7l\2\2\u0098"+
		"\u0099\7q\2\2\u0099\u009a\7k\2\2\u009a\u009b\7p\2\2\u009b\26\3\2\2\2\u009c"+
		"\u009d\7f\2\2\u009d\u009e\7q\2\2\u009e\30\3\2\2\2\u009f\u00a0\7h\2\2\u00a0"+
		"\u00a1\7w\2\2\u00a1\u00a2\7p\2\2\u00a2\u00a3\7e\2\2\u00a3\u00a4\7v\2\2"+
		"\u00a4\u00a5\7k\2\2\u00a5\u00a6\7q\2\2\u00a6\u00a7\7p\2\2\u00a7\32\3\2"+
		"\2\2\u00a8\u00a9\7p\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab\7p\2\2\u00ab\u00ac"+
		"\7g\2\2\u00ac\34\3\2\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af\7p\2\2\u00af\u00b0"+
		"\7v\2\2\u00b0\u00b1\7q\2\2\u00b1\36\3\2\2\2\u00b2\u00b3\7w\2\2\u00b3\u00b4"+
		"\7r\2\2\u00b4 \3\2\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8"+
		"\7r\2\2\u00b8\u00b9\7w\2\2\u00b9\u00ba\7v\2\2\u00ba\"\3\2\2\2\u00bb\u00bc"+
		"\7q\2\2\u00bc\u00bd\7w\2\2\u00bd\u00be\7v\2\2\u00be\u00bf\7r\2\2\u00bf"+
		"\u00c0\7w\2\2\u00c0\u00c1\7v\2\2\u00c1$\3\2\2\2\u00c2\u00c3\7k\2\2\u00c3"+
		"\u00c4\7p\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6\7g\2\2\u00c6\u00c7\7i\2\2"+
		"\u00c7\u00c8\7g\2\2\u00c8\u00c9\7t\2\2\u00c9&\3\2\2\2\u00ca\u00cb\7d\2"+
		"\2\u00cb\u00cc\7q\2\2\u00cc\u00cd\7q\2\2\u00cd\u00ce\7n\2\2\u00ce\u00cf"+
		"\7g\2\2\u00cf\u00d0\7c\2\2\u00d0\u00d1\7p\2\2\u00d1(\3\2\2\2\u00d2\u00d3"+
		"\7v\2\2\u00d3\u00d4\7t\2\2\u00d4\u00d5\7w\2\2\u00d5\u00d6\7g\2\2\u00d6"+
		"*\3\2\2\2\u00d7\u00d8\7h\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7n\2\2\u00da"+
		"\u00db\7u\2\2\u00db\u00dc\7g\2\2\u00dc,\3\2\2\2\u00dd\u00de\7*\2\2\u00de"+
		".\3\2\2\2\u00df\u00e0\7+\2\2\u00e0\60\3\2\2\2\u00e1\u00e2\7}\2\2\u00e2"+
		"\62\3\2\2\2\u00e3\u00e4\7\177\2\2\u00e4\64\3\2\2\2\u00e5\u00e6\7=\2\2"+
		"\u00e6\66\3\2\2\2\u00e7\u00e8\7]\2\2\u00e88\3\2\2\2\u00e9\u00ea\7_\2\2"+
		"\u00ea:\3\2\2\2\u00eb\u00ec\7)\2\2\u00ec<\3\2\2\2\u00ed\u00ee\7$\2\2\u00ee"+
		">\3\2\2\2\u00ef\u00f0\7.\2\2\u00f0@\3\2\2\2\u00f1\u00f2\7#\2\2\u00f2B"+
		"\3\2\2\2\u00f3\u00f4\7B\2\2\u00f4D\3\2\2\2\u00f5\u00f6\7r\2\2\u00f6\u00f7"+
		"\7n\2\2\u00f7\u00f8\7w\2\2\u00f8\u00f9\7u\2\2\u00f9F\3\2\2\2\u00fa\u00fb"+
		"\7o\2\2\u00fb\u00fc\7k\2\2\u00fc\u00fd\7p\2\2\u00fd\u00fe\7w\2\2\u00fe"+
		"\u00ff\7u\2\2\u00ffH\3\2\2\2\u0100\u0101\7v\2\2\u0101\u0102\7k\2\2\u0102"+
		"\u0103\7o\2\2\u0103\u0104\7g\2\2\u0104\u0105\7u\2\2\u0105J\3\2\2\2\u0106"+
		"\u0107\7f\2\2\u0107\u0108\7k\2\2\u0108\u0109\7x\2\2\u0109L\3\2\2\2\u010a"+
		"\u010b\7c\2\2\u010b\u010c\7p\2\2\u010c\u010d\7f\2\2\u010dN\3\2\2\2\u010e"+
		"\u010f\7q\2\2\u010f\u0110\7t\2\2\u0110P\3\2\2\2\u0111\u0112\7@\2\2\u0112"+
		"\u0113\7@\2\2\u0113R\3\2\2\2\u0114\u0115\7>\2\2\u0115\u0116\7>\2\2\u0116"+
		"T\3\2\2\2\u0117\u0118\7@\2\2\u0118\u0119\7?\2\2\u0119V\3\2\2\2\u011a\u011b"+
		"\7?\2\2\u011b\u011c\7>\2\2\u011cX\3\2\2\2\u011d\u011e\7?\2\2\u011e\u011f"+
		"\7?\2\2\u011fZ\3\2\2\2\u0120\u0121\7\61\2\2\u0121\u0122\7\61\2\2\u0122"+
		"\\\3\2\2\2\u0123\u0128\5e\63\2\u0124\u0127\5g\64\2\u0125\u0127\5i\65\2"+
		"\u0126\u0124\3\2\2\2\u0126\u0125\3\2\2\2\u0127\u012a\3\2\2\2\u0128\u0126"+
		"\3\2\2\2\u0128\u0129\3\2\2\2\u0129^\3\2\2\2\u012a\u0128\3\2\2\2\u012b"+
		"\u012f\5i\65\2\u012c\u012e\5i\65\2\u012d\u012c\3\2\2\2\u012e\u0131\3\2"+
		"\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130`\3\2\2\2\u0131\u012f"+
		"\3\2\2\2\u0132\u0134\t\2\2\2\u0133\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135"+
		"\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\b\61"+
		"\2\2\u0138b\3\2\2\2\u0139\u013a\t\3\2\2\u013ad\3\2\2\2\u013b\u013c\t\4"+
		"\2\2\u013cf\3\2\2\2\u013d\u013e\t\5\2\2\u013eh\3\2\2\2\u013f\u0140\t\6"+
		"\2\2\u0140j\3\2\2\2\7\2\u0126\u0128\u012f\u0135\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}