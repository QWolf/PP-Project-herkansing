// Generated from Yall.g4 by ANTLR 4.4
package grammar;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class YallLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		YALL=1, GLOBAL=2, LOCAL=3, IS=4, IF=5, THEN=6, ELSE=7, WHILE=8, LOCK=9, 
		UNLOCK=10, FORK=11, JOIN=12, DO=13, NONE=14, UP=15, INPUT=16, OUTPUTBOOL=17, 
		OUTPUTINT=18, INTEGER=19, BOOLEAN=20, TRUE=21, FALSE=22, LPAR=23, RPAR=24, 
		LBRACE=25, RBRACE=26, SEMI=27, LBLOCK=28, RBLOCK=29, QUOTE=30, DQUOTE=31, 
		COMMA=32, EXCL=33, AT=34, PLUS=35, MINUS=36, TIMES=37, DIVIDE=38, AND=39, 
		OR=40, XOR=41, NOT=42, GT=43, LT=44, GE=45, LE=46, EQ=47, NE=48, ID=49, 
		NUM=50, COMMENT=51, COMMENTBLOCK=52, WS=53;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'"
	};
	public static final String[] ruleNames = {
		"YALL", "GLOBAL", "LOCAL", "IS", "IF", "THEN", "ELSE", "WHILE", "LOCK", 
		"UNLOCK", "FORK", "JOIN", "DO", "NONE", "UP", "INPUT", "OUTPUTBOOL", "OUTPUTINT", 
		"INTEGER", "BOOLEAN", "TRUE", "FALSE", "LPAR", "RPAR", "LBRACE", "RBRACE", 
		"SEMI", "LBLOCK", "RBLOCK", "QUOTE", "DQUOTE", "COMMA", "EXCL", "AT", 
		"PLUS", "MINUS", "TIMES", "DIVIDE", "AND", "OR", "XOR", "NOT", "GT", "LT", 
		"GE", "LE", "EQ", "NE", "ID", "NUM", "COMMENT", "COMMENTBLOCK", "WS", 
		"LOWERCASE", "UPPERCASE", "LETTER", "DIGIT"
	};


	public YallLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Yall.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\67\u017c\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\3\2\3\2\3\2\3\2"+
		"\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3"+
		"\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3"+
		"\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17"+
		"\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34"+
		"\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3$\3"+
		"$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3"+
		")\3)\3*\3*\3*\3*\3+\3+\3+\3+\3,\3,\3,\3-\3-\3-\3.\3.\3.\3/\3/\3/\3\60"+
		"\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\7\62\u0149\n\62\f\62\16\62\u014c"+
		"\13\62\3\63\3\63\7\63\u0150\n\63\f\63\16\63\u0153\13\63\3\64\3\64\3\64"+
		"\7\64\u0158\n\64\f\64\16\64\u015b\13\64\3\64\3\64\3\64\3\64\3\65\3\65"+
		"\3\65\7\65\u0164\n\65\f\65\16\65\u0167\13\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\66\6\66\u016f\n\66\r\66\16\66\u0170\3\66\3\66\3\67\3\67\38\38\39\3"+
		"9\3:\3:\4\u0159\u0165\2;\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f"+
		"\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63"+
		"\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62"+
		"c\63e\64g\65i\66k\67m\2o\2q\2s\2\3\2\7\5\2\13\f\17\17\"\"\3\2c|\3\2C\\"+
		"\4\2C\\c|\3\2\62;\u017d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2"+
		"\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25"+
		"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2"+
		"\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2"+
		"\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3"+
		"\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2"+
		"\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2"+
		"Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3"+
		"\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2"+
		"\2\2k\3\2\2\2\3u\3\2\2\2\5z\3\2\2\2\7\u0081\3\2\2\2\t\u0087\3\2\2\2\13"+
		"\u008a\3\2\2\2\r\u008d\3\2\2\2\17\u0092\3\2\2\2\21\u0097\3\2\2\2\23\u009d"+
		"\3\2\2\2\25\u00a2\3\2\2\2\27\u00a9\3\2\2\2\31\u00ae\3\2\2\2\33\u00b3\3"+
		"\2\2\2\35\u00b6\3\2\2\2\37\u00bb\3\2\2\2!\u00be\3\2\2\2#\u00c4\3\2\2\2"+
		"%\u00d2\3\2\2\2\'\u00dc\3\2\2\2)\u00e4\3\2\2\2+\u00ec\3\2\2\2-\u00f1\3"+
		"\2\2\2/\u00f7\3\2\2\2\61\u00f9\3\2\2\2\63\u00fb\3\2\2\2\65\u00fd\3\2\2"+
		"\2\67\u00ff\3\2\2\29\u0101\3\2\2\2;\u0103\3\2\2\2=\u0105\3\2\2\2?\u0107"+
		"\3\2\2\2A\u0109\3\2\2\2C\u010b\3\2\2\2E\u010d\3\2\2\2G\u010f\3\2\2\2I"+
		"\u0114\3\2\2\2K\u011a\3\2\2\2M\u0120\3\2\2\2O\u0124\3\2\2\2Q\u0128\3\2"+
		"\2\2S\u012b\3\2\2\2U\u012f\3\2\2\2W\u0133\3\2\2\2Y\u0136\3\2\2\2[\u0139"+
		"\3\2\2\2]\u013c\3\2\2\2_\u013f\3\2\2\2a\u0142\3\2\2\2c\u0145\3\2\2\2e"+
		"\u014d\3\2\2\2g\u0154\3\2\2\2i\u0160\3\2\2\2k\u016e\3\2\2\2m\u0174\3\2"+
		"\2\2o\u0176\3\2\2\2q\u0178\3\2\2\2s\u017a\3\2\2\2uv\7[\2\2vw\7C\2\2wx"+
		"\7N\2\2xy\7N\2\2y\4\3\2\2\2z{\7i\2\2{|\7n\2\2|}\7q\2\2}~\7d\2\2~\177\7"+
		"c\2\2\177\u0080\7n\2\2\u0080\6\3\2\2\2\u0081\u0082\7n\2\2\u0082\u0083"+
		"\7q\2\2\u0083\u0084\7e\2\2\u0084\u0085\7c\2\2\u0085\u0086\7n\2\2\u0086"+
		"\b\3\2\2\2\u0087\u0088\7k\2\2\u0088\u0089\7u\2\2\u0089\n\3\2\2\2\u008a"+
		"\u008b\7k\2\2\u008b\u008c\7h\2\2\u008c\f\3\2\2\2\u008d\u008e\7v\2\2\u008e"+
		"\u008f\7j\2\2\u008f\u0090\7g\2\2\u0090\u0091\7p\2\2\u0091\16\3\2\2\2\u0092"+
		"\u0093\7g\2\2\u0093\u0094\7n\2\2\u0094\u0095\7u\2\2\u0095\u0096\7g\2\2"+
		"\u0096\20\3\2\2\2\u0097\u0098\7y\2\2\u0098\u0099\7j\2\2\u0099\u009a\7"+
		"k\2\2\u009a\u009b\7n\2\2\u009b\u009c\7g\2\2\u009c\22\3\2\2\2\u009d\u009e"+
		"\7n\2\2\u009e\u009f\7q\2\2\u009f\u00a0\7e\2\2\u00a0\u00a1\7m\2\2\u00a1"+
		"\24\3\2\2\2\u00a2\u00a3\7w\2\2\u00a3\u00a4\7p\2\2\u00a4\u00a5\7n\2\2\u00a5"+
		"\u00a6\7q\2\2\u00a6\u00a7\7e\2\2\u00a7\u00a8\7m\2\2\u00a8\26\3\2\2\2\u00a9"+
		"\u00aa\7h\2\2\u00aa\u00ab\7q\2\2\u00ab\u00ac\7t\2\2\u00ac\u00ad\7m\2\2"+
		"\u00ad\30\3\2\2\2\u00ae\u00af\7l\2\2\u00af\u00b0\7q\2\2\u00b0\u00b1\7"+
		"k\2\2\u00b1\u00b2\7p\2\2\u00b2\32\3\2\2\2\u00b3\u00b4\7f\2\2\u00b4\u00b5"+
		"\7q\2\2\u00b5\34\3\2\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8\7q\2\2\u00b8\u00b9"+
		"\7p\2\2\u00b9\u00ba\7g\2\2\u00ba\36\3\2\2\2\u00bb\u00bc\7w\2\2\u00bc\u00bd"+
		"\7r\2\2\u00bd \3\2\2\2\u00be\u00bf\7k\2\2\u00bf\u00c0\7p\2\2\u00c0\u00c1"+
		"\7r\2\2\u00c1\u00c2\7w\2\2\u00c2\u00c3\7v\2\2\u00c3\"\3\2\2\2\u00c4\u00c5"+
		"\7q\2\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7v\2\2\u00c7\u00c8\7r\2\2\u00c8"+
		"\u00c9\7w\2\2\u00c9\u00ca\7v\2\2\u00ca\u00cb\7D\2\2\u00cb\u00cc\7q\2\2"+
		"\u00cc\u00cd\7q\2\2\u00cd\u00ce\7n\2\2\u00ce\u00cf\7g\2\2\u00cf\u00d0"+
		"\7c\2\2\u00d0\u00d1\7p\2\2\u00d1$\3\2\2\2\u00d2\u00d3\7q\2\2\u00d3\u00d4"+
		"\7w\2\2\u00d4\u00d5\7v\2\2\u00d5\u00d6\7r\2\2\u00d6\u00d7\7w\2\2\u00d7"+
		"\u00d8\7v\2\2\u00d8\u00d9\7K\2\2\u00d9\u00da\7p\2\2\u00da\u00db\7v\2\2"+
		"\u00db&\3\2\2\2\u00dc\u00dd\7k\2\2\u00dd\u00de\7p\2\2\u00de\u00df\7v\2"+
		"\2\u00df\u00e0\7g\2\2\u00e0\u00e1\7i\2\2\u00e1\u00e2\7g\2\2\u00e2\u00e3"+
		"\7t\2\2\u00e3(\3\2\2\2\u00e4\u00e5\7d\2\2\u00e5\u00e6\7q\2\2\u00e6\u00e7"+
		"\7q\2\2\u00e7\u00e8\7n\2\2\u00e8\u00e9\7g\2\2\u00e9\u00ea\7c\2\2\u00ea"+
		"\u00eb\7p\2\2\u00eb*\3\2\2\2\u00ec\u00ed\7v\2\2\u00ed\u00ee\7t\2\2\u00ee"+
		"\u00ef\7w\2\2\u00ef\u00f0\7g\2\2\u00f0,\3\2\2\2\u00f1\u00f2\7h\2\2\u00f2"+
		"\u00f3\7c\2\2\u00f3\u00f4\7n\2\2\u00f4\u00f5\7u\2\2\u00f5\u00f6\7g\2\2"+
		"\u00f6.\3\2\2\2\u00f7\u00f8\7*\2\2\u00f8\60\3\2\2\2\u00f9\u00fa\7+\2\2"+
		"\u00fa\62\3\2\2\2\u00fb\u00fc\7}\2\2\u00fc\64\3\2\2\2\u00fd\u00fe\7\177"+
		"\2\2\u00fe\66\3\2\2\2\u00ff\u0100\7=\2\2\u01008\3\2\2\2\u0101\u0102\7"+
		"]\2\2\u0102:\3\2\2\2\u0103\u0104\7_\2\2\u0104<\3\2\2\2\u0105\u0106\7)"+
		"\2\2\u0106>\3\2\2\2\u0107\u0108\7$\2\2\u0108@\3\2\2\2\u0109\u010a\7.\2"+
		"\2\u010aB\3\2\2\2\u010b\u010c\7#\2\2\u010cD\3\2\2\2\u010d\u010e\7B\2\2"+
		"\u010eF\3\2\2\2\u010f\u0110\7r\2\2\u0110\u0111\7n\2\2\u0111\u0112\7w\2"+
		"\2\u0112\u0113\7u\2\2\u0113H\3\2\2\2\u0114\u0115\7o\2\2\u0115\u0116\7"+
		"k\2\2\u0116\u0117\7p\2\2\u0117\u0118\7w\2\2\u0118\u0119\7u\2\2\u0119J"+
		"\3\2\2\2\u011a\u011b\7v\2\2\u011b\u011c\7k\2\2\u011c\u011d\7o\2\2\u011d"+
		"\u011e\7g\2\2\u011e\u011f\7u\2\2\u011fL\3\2\2\2\u0120\u0121\7f\2\2\u0121"+
		"\u0122\7k\2\2\u0122\u0123\7x\2\2\u0123N\3\2\2\2\u0124\u0125\7c\2\2\u0125"+
		"\u0126\7p\2\2\u0126\u0127\7f\2\2\u0127P\3\2\2\2\u0128\u0129\7q\2\2\u0129"+
		"\u012a\7t\2\2\u012aR\3\2\2\2\u012b\u012c\7z\2\2\u012c\u012d\7q\2\2\u012d"+
		"\u012e\7t\2\2\u012eT\3\2\2\2\u012f\u0130\7p\2\2\u0130\u0131\7q\2\2\u0131"+
		"\u0132\7v\2\2\u0132V\3\2\2\2\u0133\u0134\7@\2\2\u0134\u0135\7@\2\2\u0135"+
		"X\3\2\2\2\u0136\u0137\7>\2\2\u0137\u0138\7>\2\2\u0138Z\3\2\2\2\u0139\u013a"+
		"\7@\2\2\u013a\u013b\7?\2\2\u013b\\\3\2\2\2\u013c\u013d\7?\2\2\u013d\u013e"+
		"\7>\2\2\u013e^\3\2\2\2\u013f\u0140\7?\2\2\u0140\u0141\7?\2\2\u0141`\3"+
		"\2\2\2\u0142\u0143\7\61\2\2\u0143\u0144\7?\2\2\u0144b\3\2\2\2\u0145\u014a"+
		"\5o8\2\u0146\u0149\5q9\2\u0147\u0149\5s:\2\u0148\u0146\3\2\2\2\u0148\u0147"+
		"\3\2\2\2\u0149\u014c\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b"+
		"d\3\2\2\2\u014c\u014a\3\2\2\2\u014d\u0151\5s:\2\u014e\u0150\5s:\2\u014f"+
		"\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152\3\2"+
		"\2\2\u0152f\3\2\2\2\u0153\u0151\3\2\2\2\u0154\u0155\5C\"\2\u0155\u0159"+
		"\5C\"\2\u0156\u0158\13\2\2\2\u0157\u0156\3\2\2\2\u0158\u015b\3\2\2\2\u0159"+
		"\u015a\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015c\3\2\2\2\u015b\u0159\3\2"+
		"\2\2\u015c\u015d\7\f\2\2\u015d\u015e\3\2\2\2\u015e\u015f\b\64\2\2\u015f"+
		"h\3\2\2\2\u0160\u0161\5C\"\2\u0161\u0165\5E#\2\u0162\u0164\13\2\2\2\u0163"+
		"\u0162\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0166\3\2\2\2\u0165\u0163\3\2"+
		"\2\2\u0166\u0168\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u0169\5E#\2\u0169\u016a"+
		"\5C\"\2\u016a\u016b\3\2\2\2\u016b\u016c\b\65\2\2\u016cj\3\2\2\2\u016d"+
		"\u016f\t\2\2\2\u016e\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u016e\3\2"+
		"\2\2\u0170\u0171\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0173\b\66\2\2\u0173"+
		"l\3\2\2\2\u0174\u0175\t\3\2\2\u0175n\3\2\2\2\u0176\u0177\t\4\2\2\u0177"+
		"p\3\2\2\2\u0178\u0179\t\5\2\2\u0179r\3\2\2\2\u017a\u017b\t\6\2\2\u017b"+
		"t\3\2\2\2\t\2\u0148\u014a\u0151\u0159\u0165\u0170\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}