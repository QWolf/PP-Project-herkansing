import Sprockell.System

prog :: [Instruction]
prog = [	Const 0 RegE,
	Write RegE (Addr 0),
	Const 1 RegE,
	Store RegE (Addr 0),
	Load (Addr 0) RegE,
	Const 1 RegD,
	Compute Equal RegE RegD RegD,
	Branch RegD (Rel 12),
	Const 102 RegD,
	Write RegD (Addr 16777216),
	Const 97 RegD,
	Write RegD (Addr 16777216),
	Const 108 RegD,
	Write RegD (Addr 16777216),
	Const 115 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegD,
	Write RegD (Addr 16777216),
	Const 114 RegD,
	Write RegD (Addr 16777216),
	Const 117 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Const 10 RegD,
	Write RegD (Addr 16777216),
	Load (Addr 0) RegD,
	Const 0 RegE,
	Compute Equal RegD RegE RegE,
	Branch RegE (Rel 12),
	Const 102 RegE,
	Write RegE (Addr 16777216),
	Const 97 RegE,
	Write RegE (Addr 16777216),
	Const 108 RegE,
	Write RegE (Addr 16777216),
	Const 115 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegE,
	Write RegE (Addr 16777216),
	Const 114 RegE,
	Write RegE (Addr 16777216),
	Const 117 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Const 10 RegE,
	Write RegE (Addr 16777216),
	Const 1 RegE,
	Branch RegE (Rel 2),
	Jump (Abs 84),
	Const 2 RegE,
	Store RegE (Addr 4),
	Load (Addr 0) RegE,
	Const 0 RegD,
	Compute Equal RegE RegD RegD,
	Branch RegD (Rel 12),
	Const 102 RegD,
	Write RegD (Addr 16777216),
	Const 97 RegD,
	Write RegD (Addr 16777216),
	Const 108 RegD,
	Write RegD (Addr 16777216),
	Const 115 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegD,
	Write RegD (Addr 16777216),
	Const 114 RegD,
	Write RegD (Addr 16777216),
	Const 117 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Const 10 RegD,
	Write RegD (Addr 16777216),
	Nop,
	EndProg,
	 Nop]

main = run 1 prog >> putChar '\n'
