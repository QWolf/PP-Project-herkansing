import Sprockell.System

prog :: [Instruction]
prog = [	Write Zero (Addr 0),
	Write Zero (Addr 1),
	Write Zero (Addr 2),
	Const 1 RegE,
	Store RegE (Addr 0),
	Const 10 RegE,
	Store RegE (Addr 4),
	Store Zero (Addr 8),
	Load (Addr 0) RegE,
	Branch RegE (Rel 2),
	Jump (Abs 14),
	Load (Addr 4) RegE,
	Store RegE (Addr 8),
	Jump (Abs 17),
	Nop,
	Const 3 RegE,
	Store RegE (Addr 8),
	Nop,
	Load (Addr 4) RegE,
	Load (Addr 8) RegD,
	Compute Gt RegE RegD RegD,
	Branch RegD (Rel 2),
	Jump (Abs 27),
	Load (Addr 8) RegD,
	Const 0 RegE,
	Compute Equal RegD RegE RegE,
	Store RegE (Addr 0),
	Nop,
	Store Zero (Addr 12),
	Store Zero (Addr 16),
	TestAndSet (Addr 1),
	Receive RegE,
	Branch RegE (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 2),
	Load (Addr 12) RegE,
	Branch RegE (Rel 12),
	Const 102 RegE,
	Write RegE (Addr 16777216),
	Const 97 RegE,
	Write RegE (Addr 16777216),
	Const 108 RegE,
	Write RegE (Addr 16777216),
	Const 115 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegE,
	Write RegE (Addr 16777216),
	Const 114 RegE,
	Write RegE (Addr 16777216),
	Const 117 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Const 10 RegE,
	Write RegE (Addr 16777216),
	Read (Addr 0),
	Receive RegE,
	Write Zero (Addr 1),
	Load (Addr 0) RegE,
	Load (Addr 12) RegD,
	Compute And RegE RegD RegD,
	Store RegD (Addr 16),
	TestAndSet (Addr 1),
	Receive RegD,
	Branch RegD (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 2),
	Load (Addr 16) RegD,
	Branch RegD (Rel 12),
	Const 102 RegD,
	Write RegD (Addr 16777216),
	Const 97 RegD,
	Write RegD (Addr 16777216),
	Const 108 RegD,
	Write RegD (Addr 16777216),
	Const 115 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegD,
	Write RegD (Addr 16777216),
	Const 114 RegD,
	Write RegD (Addr 16777216),
	Const 117 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Const 10 RegD,
	Write RegD (Addr 16777216),
	Read (Addr 0),
	Receive RegD,
	Write Zero (Addr 1),
	Load (Addr 0) RegD,
	Branch RegD (Rel 2),
	Jump (Abs 104),
	Load (Addr 4) RegD,
	Store RegD (Addr 20),
	Load (Addr 8) RegD,
	Store RegD (Addr 4),
	Jump (Abs 109),
	Nop,
	Const 3 RegD,
	Store RegD (Addr 20),
	Load (Addr 8) RegD,
	Store RegD (Addr 4),
	Nop,
	Read (Addr 0),
	Receive RegE,
	EndProg,
	 Nop]

main = run 1 prog >> putChar '\n'
