import Sprockell.System

prog :: [Instruction]
prog = [	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 10),
	Write Zero (Addr 0),
	Write Zero (Addr 1),
	Write Zero (Addr 2),
	Write Zero (Addr 3),
	Write Zero (Addr 4),
	Const 1 RegE,
	Write RegE (Addr 0),
	Jump (Abs 15),
	Const 1 RegE,
	Read (Addr 0),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 20),
	Const 1 RegE,
	Write RegE (Addr 1),
	Jump (Abs 72),
	Const 1 RegE,
	Read (Addr 1),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Const 1 RegD,
	Write RegD (Addr 2),
	Jump (Abs 52),
	Const 1 RegD,
	Read (Addr 2),
	Receive RegE,
	Compute NEq RegD RegE RegE,
	Branch RegE (Rel (-3)),
	Const 0 RegE,
	Store RegE (Addr 0),
	Nop,
	Load (Addr 0) RegE,
	Const 20 RegD,
	Compute Lt RegE RegD RegD,
	Branch RegD (Abs 41),
	Jump (Abs 46),
	Nop,
	Load (Addr 0) RegD,
	Compute Incr RegD RegD RegD,
	Store RegD (Addr 0),
	Jump (Abs 35),
	Nop,
	Const 2 RegD,
	Write RegD (Addr 2),
	Read (Addr 0),
	Receive RegD,
	EndProg,
	Nop,
	Const 0 RegE,
	Store RegE (Addr 0),
	Nop,
	Load (Addr 0) RegE,
	Const 20 RegC,
	Compute Lt RegE RegC RegC,
	Branch RegC (Abs 61),
	Jump (Abs 66),
	Nop,
	Load (Addr 0) RegC,
	Compute Incr RegC RegC RegC,
	Store RegC (Addr 0),
	Jump (Abs 55),
	Nop,
	Const 2 RegC,
	Write RegC (Addr 1),
	Read (Addr 0),
	Receive RegC,
	EndProg,
	Nop,
	Const 0 RegE,
	Store RegE (Addr 0),
	Nop,
	Load (Addr 0) RegE,
	Const 0 RegB,
	Compute Lt RegE RegB RegB,
	Branch RegB (Abs 81),
	Jump (Abs 86),
	Nop,
	Load (Addr 0) RegB,
	Compute Incr RegB RegB RegB,
	Store RegB (Addr 0),
	Jump (Abs 75),
	Nop,
	Read (Addr 0),
	Receive RegE,
	EndProg,
	 Nop]

main = run 3 prog >> putChar '\n'
