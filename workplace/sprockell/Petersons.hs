import Sprockell.System

prog :: [Instruction]
prog = [	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 12),
	Write Zero (Addr 0),
	Const 0 RegE,
	Write RegE (Addr 1),
	Const 0 RegE,
	Write RegE (Addr 5),
	Const 0 RegE,
	Write RegE (Addr 9),
	Const 1 RegE,
	Write RegE (Addr 0),
	Jump (Abs 17),
	Const 1 RegE,
	Read (Addr 0),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 22),
	Const 1 RegE,
	Write RegE (Addr 1),
	Jump (Abs 74),
	Const 1 RegE,
	Read (Addr 1),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Const 1 RegD,
	Write RegD (Addr 5),
	Const 1 RegD,
	Write RegD (Addr 9),
	Nop,
	Read (Addr 1),
	Receive RegD,
	Read (Addr 9),
	Receive RegE,
	Const 0 RegC,
	Compute Equal RegE RegC RegC,
	Compute And RegD RegC RegC,
	Branch RegC (Abs 41),
	Jump (Abs 43),
	Nop,
	Jump (Abs 31),
	Nop,
	Const 0 RegC,
	Write RegC (Addr 5),
	Const 0 RegC,
	Branch RegC (Rel 12),
	Const 102 RegC,
	Write RegC (Addr 16777216),
	Const 97 RegC,
	Write RegC (Addr 16777216),
	Const 108 RegC,
	Write RegC (Addr 16777216),
	Const 115 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegC,
	Write RegC (Addr 16777216),
	Const 114 RegC,
	Write RegC (Addr 16777216),
	Const 117 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Const 10 RegC,
	Write RegC (Addr 16777216),
	Const 2 RegC,
	Write RegC (Addr 1),
	Read (Addr 0),
	Receive RegC,
	EndProg,
	Nop,
	Const 1 RegD,
	Write RegD (Addr 1),
	Const 0 RegD,
	Write RegD (Addr 9),
	Nop,
	Read (Addr 5),
	Receive RegD,
	Read (Addr 9),
	Receive RegE,
	Const 1 RegB,
	Compute Equal RegE RegB RegB,
	Compute And RegD RegB RegB,
	Branch RegB (Abs 89),
	Jump (Abs 91),
	Nop,
	Jump (Abs 79),
	Nop,
	Const 0 RegB,
	Write RegB (Addr 1),
	Const 1 RegB,
	Branch RegB (Rel 12),
	Const 102 RegB,
	Write RegB (Addr 16777216),
	Const 97 RegB,
	Write RegB (Addr 16777216),
	Const 108 RegB,
	Write RegB (Addr 16777216),
	Const 115 RegB,
	Write RegB (Addr 16777216),
	Const 101 RegB,
	Write RegB (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegB,
	Write RegB (Addr 16777216),
	Const 114 RegB,
	Write RegB (Addr 16777216),
	Const 117 RegB,
	Write RegB (Addr 16777216),
	Const 101 RegB,
	Write RegB (Addr 16777216),
	Const 10 RegB,
	Write RegB (Addr 16777216),
	Const 2 RegD,
	Read (Addr 1),
	Receive RegB,
	Compute NEq RegB RegD RegE,
	Branch RegE (Rel (-3)),
	Const 1 RegE,
	Branch RegE (Rel 12),
	Const 102 RegE,
	Write RegE (Addr 16777216),
	Const 97 RegE,
	Write RegE (Addr 16777216),
	Const 108 RegE,
	Write RegE (Addr 16777216),
	Const 115 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegE,
	Write RegE (Addr 16777216),
	Const 114 RegE,
	Write RegE (Addr 16777216),
	Const 117 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Const 10 RegE,
	Write RegE (Addr 16777216),
	EndProg,
	 Nop]

main = run 2 prog >> putChar '\n'
