import Sprockell.System

prog :: [Instruction]
prog = [	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 15),
	Write Zero (Addr 0),
	Write Zero (Addr 1),
	Write Zero (Addr 2),
	Write Zero (Addr 3),
	Const 0 RegE,
	Write RegE (Addr 4),
	Const 0 RegE,
	Write RegE (Addr 8),
	Const 0 RegE,
	Write RegE (Addr 12),
	Const 1 RegE,
	Write RegE (Addr 0),
	Jump (Abs 20),
	Const 1 RegE,
	Read (Addr 0),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 25),
	Const 1 RegE,
	Write RegE (Addr 1),
	Jump (Abs 85),
	Const 1 RegE,
	Read (Addr 1),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Const 1 RegD,
	Write RegD (Addr 8),
	Const 1 RegD,
	Write RegD (Addr 12),
	Nop,
	Read (Addr 4),
	Receive RegD,
	Read (Addr 12),
	Receive RegE,
	Const 0 RegC,
	Compute Equal RegE RegC RegC,
	Compute And RegD RegC RegC,
	Branch RegC (Abs 44),
	Jump (Abs 46),
	Nop,
	Jump (Abs 34),
	Nop,
	Const 0 RegC,
	Write RegC (Addr 8),
	TestAndSet (Addr 2),
	Receive RegC,
	Branch RegC (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 3),
	Const 0 RegC,
	Branch RegC (Rel 12),
	Const 102 RegC,
	Write RegC (Addr 16777216),
	Const 97 RegC,
	Write RegC (Addr 16777216),
	Const 108 RegC,
	Write RegC (Addr 16777216),
	Const 115 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegC,
	Write RegC (Addr 16777216),
	Const 114 RegC,
	Write RegC (Addr 16777216),
	Const 117 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Const 10 RegC,
	Write RegC (Addr 16777216),
	Read (Addr 0),
	Receive RegC,
	Write Zero (Addr 2),
	Const 2 RegC,
	Write RegC (Addr 1),
	Read (Addr 0),
	Receive RegC,
	EndProg,
	Nop,
	Const 1 RegD,
	Write RegD (Addr 4),
	Const 0 RegD,
	Write RegD (Addr 12),
	Nop,
	Read (Addr 8),
	Receive RegD,
	Read (Addr 12),
	Receive RegE,
	Const 1 RegB,
	Compute Equal RegE RegB RegB,
	Compute And RegD RegB RegB,
	Branch RegB (Abs 100),
	Jump (Abs 102),
	Nop,
	Jump (Abs 90),
	Nop,
	Const 0 RegB,
	Write RegB (Addr 4),
	TestAndSet (Addr 2),
	Receive RegB,
	Branch RegB (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 3),
	Const 1 RegB,
	Branch RegB (Rel 12),
	Const 102 RegB,
	Write RegB (Addr 16777216),
	Const 97 RegB,
	Write RegB (Addr 16777216),
	Const 108 RegB,
	Write RegB (Addr 16777216),
	Const 115 RegB,
	Write RegB (Addr 16777216),
	Const 101 RegB,
	Write RegB (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegB,
	Write RegB (Addr 16777216),
	Const 114 RegB,
	Write RegB (Addr 16777216),
	Const 117 RegB,
	Write RegB (Addr 16777216),
	Const 101 RegB,
	Write RegB (Addr 16777216),
	Const 10 RegB,
	Write RegB (Addr 16777216),
	Read (Addr 0),
	Receive RegB,
	Write Zero (Addr 2),
	Const 2 RegD,
	Read (Addr 1),
	Receive RegB,
	Compute NEq RegB RegD RegE,
	Branch RegE (Rel (-3)),
	TestAndSet (Addr 2),
	Receive RegE,
	Branch RegE (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 3),
	Const 1 RegE,
	Branch RegE (Rel 12),
	Const 102 RegE,
	Write RegE (Addr 16777216),
	Const 97 RegE,
	Write RegE (Addr 16777216),
	Const 108 RegE,
	Write RegE (Addr 16777216),
	Const 115 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegE,
	Write RegE (Addr 16777216),
	Const 114 RegE,
	Write RegE (Addr 16777216),
	Const 117 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Const 10 RegE,
	Write RegE (Addr 16777216),
	Read (Addr 0),
	Receive RegE,
	Write Zero (Addr 2),
	Read (Addr 0),
	Receive RegE,
	EndProg,
	 Nop]

main = run 2 prog >> putChar '\n'
