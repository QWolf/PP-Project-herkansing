import Sprockell.System

prog :: [Instruction]
prog = [	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 13),
	Write Zero (Addr 0),
	Write Zero (Addr 1),
	Write Zero (Addr 2),
	Write Zero (Addr 3),
	Write Zero (Addr 4),
	Write Zero (Addr 5),
	Const 1 RegE,
	Write RegE (Addr 6),
	Const 1 RegE,
	Write RegE (Addr 0),
	Jump (Abs 18),
	Const 1 RegE,
	Read (Addr 0),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Compute NEq SPID Zero RegE,
	Branch RegE (Abs 26),
	Store Zero (Addr 0),
	Const 10 RegE,
	Store RegE (Addr 4),
	Const 1 RegE,
	Write RegE (Addr 1),
	Jump (Abs 94),
	Const 1 RegE,
	Read (Addr 1),
	Receive RegD,
	Compute NEq RegE RegD RegD,
	Branch RegD (Rel (-3)),
	Const 10 RegD,
	Store RegD (Addr 0),
	TestAndSet (Addr 2),
	Receive RegD,
	Branch RegD (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 3),
	Nop,
	Load (Addr 0) RegD,
	Const 0 RegE,
	Compute Gt RegD RegE RegE,
	Branch RegE (Abs 44),
	Jump (Abs 80),
	Nop,
	TestAndSet (Addr 4),
	Receive RegE,
	Branch RegE (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 5),
	Const 1 RegE,
	Branch RegE (Rel 12),
	Const 102 RegE,
	Write RegE (Addr 16777216),
	Const 97 RegE,
	Write RegE (Addr 16777216),
	Const 108 RegE,
	Write RegE (Addr 16777216),
	Const 115 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegE,
	Write RegE (Addr 16777216),
	Const 114 RegE,
	Write RegE (Addr 16777216),
	Const 117 RegE,
	Write RegE (Addr 16777216),
	Const 101 RegE,
	Write RegE (Addr 16777216),
	Const 10 RegE,
	Write RegE (Addr 16777216),
	Read (Addr 0),
	Receive RegE,
	Write Zero (Addr 4),
	Load (Addr 0) RegE,
	Compute Decr RegE RegE RegE,
	Store RegE (Addr 0),
	Jump (Abs 38),
	Nop,
	Read (Addr 6),
	Receive RegE,
	Store RegE (Addr 4),
	Read (Addr 3),
	Receive RegE,
	Compute NEq SPID RegE RegD,
	Branch RegD (Rel 2),
	Write Zero (Addr 2),
	Const 2 RegE,
	Write RegE (Addr 1),
	Read (Addr 0),
	Receive RegE,
	EndProg,
	Nop,
	TestAndSet (Addr 2),
	Receive RegD,
	Branch RegD (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 3),
	Nop,
	Load (Addr 4) RegD,
	Const 0 RegC,
	Compute Gt RegD RegC RegC,
	Branch RegC (Abs 106),
	Jump (Abs 142),
	Nop,
	TestAndSet (Addr 4),
	Receive RegC,
	Branch RegC (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 5),
	Const 0 RegC,
	Branch RegC (Rel 12),
	Const 102 RegC,
	Write RegC (Addr 16777216),
	Const 97 RegC,
	Write RegC (Addr 16777216),
	Const 108 RegC,
	Write RegC (Addr 16777216),
	Const 115 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegC,
	Write RegC (Addr 16777216),
	Const 114 RegC,
	Write RegC (Addr 16777216),
	Const 117 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Const 10 RegC,
	Write RegC (Addr 16777216),
	Read (Addr 0),
	Receive RegC,
	Write Zero (Addr 4),
	Load (Addr 4) RegC,
	Compute Decr RegC RegC RegC,
	Store RegC (Addr 4),
	Jump (Abs 100),
	Nop,
	Read (Addr 6),
	Receive RegC,
	Store RegC (Addr 0),
	Read (Addr 3),
	Receive RegC,
	Compute NEq SPID RegC RegD,
	Branch RegD (Rel 2),
	Write Zero (Addr 2),
	Read (Addr 0),
	Receive RegE,
	EndProg,
	 Nop]

main = run 2 prog >> putChar '\n'
