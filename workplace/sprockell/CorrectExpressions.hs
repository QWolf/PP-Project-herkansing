import Sprockell.System

prog :: [Instruction]
prog = [	Write Zero (Addr 0),
	Write Zero (Addr 1),
	Write Zero (Addr 2),
	Const 0 RegE,
	Store RegE (Addr 0),
	Const 1 RegE,
	Store RegE (Addr 4),
	Const 4 RegE,
	Store RegE (Addr 8),
	Load (Addr 0) RegE,
	Load (Addr 4) RegD,
	Compute Add RegE RegD RegD,
	Load (Addr 8) RegE,
	Compute Add RegD RegE RegE,
	Load (Addr 0) RegD,
	Compute Add RegE RegD RegD,
	Load (Addr 4) RegE,
	Compute Add RegD RegE RegE,
	Load (Addr 8) RegD,
	Compute Add RegE RegD RegD,
	Load (Addr 0) RegE,
	Compute Add RegD RegE RegE,
	Load (Addr 4) RegD,
	Compute Add RegE RegD RegD,
	Load (Addr 8) RegE,
	Compute Add RegD RegE RegE,
	Store RegE (Addr 0),
	TestAndSet (Addr 1),
	Receive RegE,
	Branch RegE (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 2),
	Load (Addr 0) RegE,
	Const 15 RegD,
	Compute Equal RegE RegD RegD,
	Branch RegD (Rel 12),
	Const 102 RegD,
	Write RegD (Addr 16777216),
	Const 97 RegD,
	Write RegD (Addr 16777216),
	Const 108 RegD,
	Write RegD (Addr 16777216),
	Const 115 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegD,
	Write RegD (Addr 16777216),
	Const 114 RegD,
	Write RegD (Addr 16777216),
	Const 117 RegD,
	Write RegD (Addr 16777216),
	Const 101 RegD,
	Write RegD (Addr 16777216),
	Const 10 RegD,
	Write RegD (Addr 16777216),
	Read (Addr 0),
	Receive RegD,
	Write Zero (Addr 1),
	Const 2 RegD,
	Store RegD (Addr 0),
	Load (Addr 0) RegD,
	Const 4 RegE,
	Load (Addr 4) RegC,
	Compute Incr RegC RegC RegC,
	Compute Mul RegE RegC RegC,
	Compute Add RegD RegC RegC,
	Const 7 RegD,
	Load (Addr 8) RegE,
	Compute Sub RegD RegE RegE,
	Const 8 RegD,
	Compute Mul RegE RegD RegD,
	Compute Add RegC RegD RegD,
	Store RegD (Addr 0),
	TestAndSet (Addr 1),
	Receive RegD,
	Branch RegD (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 2),
	Load (Addr 0) RegD,
	Const 34 RegC,
	Compute Equal RegD RegC RegC,
	Branch RegC (Rel 12),
	Const 102 RegC,
	Write RegC (Addr 16777216),
	Const 97 RegC,
	Write RegC (Addr 16777216),
	Const 108 RegC,
	Write RegC (Addr 16777216),
	Const 115 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegC,
	Write RegC (Addr 16777216),
	Const 114 RegC,
	Write RegC (Addr 16777216),
	Const 117 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Const 10 RegC,
	Write RegC (Addr 16777216),
	Read (Addr 0),
	Receive RegC,
	Write Zero (Addr 1),
	Const 2 RegC,
	Store RegC (Addr 0),
	Const 3 RegC,
	Store RegC (Addr 4),
	Const 5 RegC,
	Store RegC (Addr 8),
	Load (Addr 0) RegC,
	Load (Addr 4) RegD,
	Load (Addr 8) RegE,
	Const 4 RegB,
	Push RegB,
	Const 9 RegB,
	Push RegB,
	Const 12 RegB,
	Push RegB,
	Const 8 RegB,
	Compute Incr RegB RegB RegB,
	Pop RegA,
	Compute Mod RegA RegB RegB,
	Pop RegA,
	Compute Div RegA RegB RegB,
	Pop RegA,
	Compute Add RegA RegB RegB,
	Compute Mul RegE RegB RegB,
	Compute Mul RegD RegB RegB,
	Compute Add RegC RegB RegB,
	Store RegB (Addr 0),
	TestAndSet (Addr 1),
	Receive RegB,
	Branch RegB (Rel 2),
	Jump (Rel (-3)),
	Write SPID (Addr 2),
	Load (Addr 0) RegB,
	Const 107 RegC,
	Compute Equal RegB RegC RegC,
	Branch RegC (Rel 12),
	Const 102 RegC,
	Write RegC (Addr 16777216),
	Const 97 RegC,
	Write RegC (Addr 16777216),
	Const 108 RegC,
	Write RegC (Addr 16777216),
	Const 115 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Jump (Rel 9),
	Const 116 RegC,
	Write RegC (Addr 16777216),
	Const 114 RegC,
	Write RegC (Addr 16777216),
	Const 117 RegC,
	Write RegC (Addr 16777216),
	Const 101 RegC,
	Write RegC (Addr 16777216),
	Const 10 RegC,
	Write RegC (Addr 16777216),
	Read (Addr 0),
	Receive RegC,
	Write Zero (Addr 1),
	Read (Addr 0),
	Receive RegE,
	EndProg,
	 Nop]

main = run 1 prog >> putChar '\n'
